
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/egait_parameter_validation_2013.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_egait_parameter_validation_2013.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_egait_parameter_validation_2013.py:


EgaitParameterValidation2013 - A Stride Parameter validation dataset
====================================================================

The EgaitParameterValidation2013 dataset allows access to the parameter validation dataset recorded for the EGait
system.
It contains multiple short walks recorded by two foot worn IMU sensors and a GaitRite carpet as reference.
Unfortunately, the Gaitrite and the IMU sensors are not synchronized.
To solve this, the IMU-data was cut to the strides that are expected to be on the GaitRite carpet by counting the number
of strides performed in both systems (see original publication for more info).

In the following we will show how to interact with the dataset and how to make sense of the reference information.

.. GENERATED FROM PYTHON SOURCE LINES 17-19

.. warning:: For this example to work, you need to modify the dataset path in the following line to point to the
            location of the data on your machine.

.. GENERATED FROM PYTHON SOURCE LINES 19-27

.. code-block:: default

    from pathlib import Path

    import pandas as pd

    from mad_datasets import EgaitParameterValidation2013

    dataset_path = Path("/home/arne/Documents/repos/work/datasets/eGaIT_database/")








.. GENERATED FROM PYTHON SOURCE LINES 28-30

First we will create a simple instance of the dataset class.
We can see that it contains a single recording per participant for 101 participants.

.. GENERATED FROM PYTHON SOURCE LINES 30-34

.. code-block:: default


    dataset = EgaitParameterValidation2013(data_folder=dataset_path)
    dataset






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <h4 style="margin-bottom: 0.1em;">EgaitParameterValidation2013 [101 groups/rows]</h3>
    <div style="margin-top: 0em">
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table style="margin-left: 3em;">
      <thead>
        <tr style="text-align: right;">
          <th style="text-align: center;"></th>
          <th style="text-align: center;">participant</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th style="text-align: center;">0</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">P68</td>
        </tr>
        <tr>
          <th style="text-align: center;">1</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">P62</td>
        </tr>
        <tr>
          <th style="text-align: center;">2</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">P34</td>
        </tr>
        <tr>
          <th style="text-align: center;">3</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">P20</td>
        </tr>
        <tr>
          <th style="text-align: center;">4</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">P103</td>
        </tr>
        <tr>
          <th style="text-align: center;">...</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">...</td>
        </tr>
        <tr>
          <th style="text-align: center;">96</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">P10</td>
        </tr>
        <tr>
          <th style="text-align: center;">97</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">P42</td>
        </tr>
        <tr>
          <th style="text-align: center;">98</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">P22</td>
        </tr>
        <tr>
          <th style="text-align: center;">99</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">P74</td>
        </tr>
        <tr>
          <th style="text-align: center;">100</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">P105</td>
        </tr>
      </tbody>
    </table>
    <p>101 rows Ã— 1 columns</p>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 35-36

For this example, we will select the data of a single participant.

.. GENERATED FROM PYTHON SOURCE LINES 36-40

.. code-block:: default


    subset = dataset.get_subset(participant="P115")
    subset






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <h4 style="margin-bottom: 0.1em;">EgaitParameterValidation2013 [1 groups/rows]</h3>
    <div style="margin-top: 0em">
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table style="margin-left: 3em;">
      <thead>
        <tr style="text-align: right;">
          <th style="text-align: center;"></th>
          <th style="text-align: center;">participant</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th style="text-align: center;">0</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">P115</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 41-42

And simply plot the gait data and the manually labeled stride borders.

.. GENERATED FROM PYTHON SOURCE LINES 42-61

.. code-block:: default

    import matplotlib.pyplot as plt

    imu_data = subset.data
    segmented_stride_list = subset.segmented_stride_list_

    _, axs = plt.subplots(2, 1)
    foot = "right_sensor"
    imu_data[foot].filter(like="acc").plot(ax=axs[0])
    imu_data[foot].filter(like="gyr").plot(ax=axs[1])

    for (i, s) in segmented_stride_list[foot].iterrows():
        s /= subset.sampling_rate_hz
        axs[0].axvline(s["start"], color="k", linestyle="--")
        axs[0].axvline(s["end"], color="k", linestyle="--")
        axs[1].axvline(s["start"], color="k", linestyle="--")
        axs[1].axvline(s["end"], color="k", linestyle="--")

    plt.show()




.. image-sg:: /auto_examples/images/sphx_glr_egait_parameter_validation_2013_001.png
   :alt: egait parameter validation 2013
   :srcset: /auto_examples/images/sphx_glr_egait_parameter_validation_2013_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 62-70

We can see that the IMU data is cut right in the middle of the movement to only contain the strides that were also
detected by the GaitRite system.
However, the GaitRite system defines strides from initial contact (IC) to initial contact (IC), while the manual
stride annotations define the strides from a maximum in the gyro-signal to the next (see image above).

This means that even-though the signal should contain the same strides as the reference, they don't line up.
When we compare the number of manual strides with the number of parameterized strides, we can see that there is always
one stride less in the parameterized data.

.. GENERATED FROM PYTHON SOURCE LINES 70-73

.. code-block:: default

    parameters = subset.gaitrite_parameters_
    parameters





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    {'left_sensor':       stride_length  stride_time  stance_time  swing_time
    s_id                                                     
    0           0.62577        1.167        0.867       0.300
    1           0.70900        1.208        0.850       0.358
    2           0.69898        1.167        0.884       0.283
    3           0.80049        1.142        0.834       0.308
    4           0.79072        1.191        0.867       0.324
    5           0.75001        1.250        0.892       0.358
    6           0.64322        1.200        0.909       0.291
    7           0.60007        1.134        0.751       0.383, 'right_sensor':       stride_length  stride_time  stance_time  swing_time
    s_id                                                     
    0           0.64356        1.150        0.842       0.308
    1           0.76768        1.250        0.909       0.341
    2           0.73267        1.142        0.850       0.292
    3           0.77054        1.133        0.808       0.325
    4           0.77210        1.233        0.875       0.358
    5           0.66853        1.217        0.909       0.308
    6           0.61293        1.133        0.884       0.249}



.. GENERATED FROM PYTHON SOURCE LINES 74-76

.. code-block:: default

    parameters["left_sensor"].shape





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (8, 4)



.. GENERATED FROM PYTHON SOURCE LINES 77-79

.. code-block:: default

    segmented_stride_list["left_sensor"].shape





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (9, 2)



.. GENERATED FROM PYTHON SOURCE LINES 80-89

This is caused by the different stride definitions, as explained above.

To align them, we need to first detect relevant stride events (i.e. at least the IC) from the IMU signal.
We should ensure that exactly one IC is detected per segmented stride.
Then we can use this information to create a new stride list (from one IC to the next), that should align with the
parameterized strides from the GaitRite system.

As this library includes no method to detect ICs, we will mock this to demonstrate the approach.
We simply assume that the IC is always in the center of segmented stride.

.. GENERATED FROM PYTHON SOURCE LINES 89-94

.. code-block:: default

    foot = "left_sensor"

    mock_gait_events = segmented_stride_list[foot].copy()
    mock_gait_events["ic"] = mock_gait_events["start"] + (mock_gait_events["end"] - mock_gait_events["start"]) // 2








.. GENERATED FROM PYTHON SOURCE LINES 95-96

Let's plot the mock gait events.

.. GENERATED FROM PYTHON SOURCE LINES 96-109

.. code-block:: default

    _, ax = plt.subplots(1, 1)
    imu_data[foot].filter(like="gyr").plot(ax=ax)

    for (i, s) in segmented_stride_list[foot].iterrows():
        s /= subset.sampling_rate_hz
        ax.axvline(s["start"], color="k", linestyle="--")
        ax.axvline(s["end"], color="k", linestyle="--")

    ics = mock_gait_events["ic"] / subset.sampling_rate_hz
    imu_data[foot]["gyr_y"].loc[ics].plot(ax=ax, color="r", style="s", label="mock-ICs")
    ax.legend()
    plt.show()




.. image-sg:: /auto_examples/images/sphx_glr_egait_parameter_validation_2013_002.png
   :alt: egait parameter validation 2013
   :srcset: /auto_examples/images/sphx_glr_egait_parameter_validation_2013_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 110-111

Using these mock ICs, we can create a new stride list where each stride starts and ends at the "detected" ICs.

.. GENERATED FROM PYTHON SOURCE LINES 111-117

.. code-block:: default

    new_stride_list = mock_gait_events[["ic"]].copy()
    new_stride_list["start"] = new_stride_list["ic"]
    new_stride_list["end"] = new_stride_list["ic"].shift(-1)
    new_stride_list = new_stride_list.dropna().astype(int)
    new_stride_list






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>ic</th>
          <th>start</th>
          <th>end</th>
        </tr>
        <tr>
          <th>s_id</th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>114</td>
          <td>114</td>
          <td>235</td>
        </tr>
        <tr>
          <th>1</th>
          <td>235</td>
          <td>235</td>
          <td>358</td>
        </tr>
        <tr>
          <th>2</th>
          <td>358</td>
          <td>358</td>
          <td>479</td>
        </tr>
        <tr>
          <th>3</th>
          <td>479</td>
          <td>479</td>
          <td>597</td>
        </tr>
        <tr>
          <th>4</th>
          <td>597</td>
          <td>597</td>
          <td>718</td>
        </tr>
        <tr>
          <th>5</th>
          <td>718</td>
          <td>718</td>
          <td>845</td>
        </tr>
        <tr>
          <th>6</th>
          <td>845</td>
          <td>845</td>
          <td>964</td>
        </tr>
        <tr>
          <th>7</th>
          <td>964</td>
          <td>964</td>
          <td>1085</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 118-131

.. code-block:: default

    _, ax = plt.subplots(1, 1)
    imu_data[foot].filter(like="gyr").plot(ax=ax)

    for (i, s) in new_stride_list.iterrows():
        s /= subset.sampling_rate_hz
        ax.axvline(s["start"], color="r", linestyle="--")
        ax.axvline(s["end"], color="r", linestyle="--")

    ics = mock_gait_events["ic"] / subset.sampling_rate_hz
    imu_data[foot]["gyr_y"].loc[ics].plot(ax=ax, color="r", style="s", label="mock-ICs")
    ax.legend()
    plt.show()




.. image-sg:: /auto_examples/images/sphx_glr_egait_parameter_validation_2013_003.png
   :alt: egait parameter validation 2013
   :srcset: /auto_examples/images/sphx_glr_egait_parameter_validation_2013_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 132-137

This new stride list has the same number of strides as the parameterized strides and the strides should roughly
line up.
This means we can use the parameterized strides to evaluate calculated stride parameters.

Here, we will calculate a "mock" stride time.

.. GENERATED FROM PYTHON SOURCE LINES 137-143

.. code-block:: default

    imu_parameters = pd.DataFrame(
        {"stride_time": (new_stride_list["end"] - new_stride_list["start"]) / subset.sampling_rate_hz},
        index=new_stride_list.index,
    )
    imu_parameters






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>stride_time</th>
        </tr>
        <tr>
          <th>s_id</th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>1.181641</td>
        </tr>
        <tr>
          <th>1</th>
          <td>1.201172</td>
        </tr>
        <tr>
          <th>2</th>
          <td>1.181641</td>
        </tr>
        <tr>
          <th>3</th>
          <td>1.152344</td>
        </tr>
        <tr>
          <th>4</th>
          <td>1.181641</td>
        </tr>
        <tr>
          <th>5</th>
          <td>1.240234</td>
        </tr>
        <tr>
          <th>6</th>
          <td>1.162109</td>
        </tr>
        <tr>
          <th>7</th>
          <td>1.181641</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 144-145

With that we can calculate the error of our stride parameters against the reference.

.. GENERATED FROM PYTHON SOURCE LINES 145-148

.. code-block:: default

    error = (imu_parameters["stride_time"] - parameters[foot]["stride_time"]).abs().rename("abs. Stride Time Error [s]")
    error





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    s_id
    0    0.014641
    1    0.006828
    2    0.014641
    3    0.010344
    4    0.009359
    5    0.009766
    6    0.037891
    7    0.047641
    Name: abs. Stride Time Error [s], dtype: float64



.. GENERATED FROM PYTHON SOURCE LINES 149-152

Similarly to this approach other parameters can be calculated and compared.
Just keep in mind, that you always need to first detect either ICs (or other gait events) within the segmented
strides and then shift the stride definition before comparing the parameters.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.540 seconds)

**Estimated memory usage:**  9 MB


.. _sphx_glr_download_auto_examples_egait_parameter_validation_2013.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: egait_parameter_validation_2013.py <egait_parameter_validation_2013.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: egait_parameter_validation_2013.ipynb <egait_parameter_validation_2013.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
